apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-pen-tests
data:
  sql_injection_test.zap: |
    function sender(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/users")) {
        var testParams = ["1 OR 1=1", "1; DROP TABLE users", "1' OR '1'='1"];
        for (var i = 0; i < testParams.length; i++) {
          var param = testParams[i];
          var newMsg = msg.cloneRequest();
          newMsg.getRequestHeader().getURI().setQuery("id=" + encodeURIComponent(param));
          helper.getHttpSender().sendAndReceive(newMsg);
          var respBody = newMsg.getResponseBody().toString().toLowerCase();
          if (
            newMsg.getResponseHeader().getStatusCode() === 500 &&
            respBody.includes("sql")
          ) {
            helper.raiseAlert(
              3, // High
              2, // Medium confidence
              "SQL Injection",
              "Potential SQL injection with param: " + param,
              newMsg.getRequestHeader().getURI().toString(),
              "id",
              param,
              newMsg.getResponseBody().toString(),
              0, 0, newMsg
            );
          }
        }
      }
    }
  xss_test.zap: |
    function sender(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/greet")) {
        var xssPayloads = [
          "<script>alert('XSS')</script>",
          "<img src=x onerror=alert(1)>",
          "\"'><script>alert(1)</script>"
        ];
        for (var i = 0; i < xssPayloads.length; i++) {
          var payload = xssPayloads[i];
          var newMsg = msg.cloneRequest();
          newMsg.getRequestHeader().getURI().setQuery("username=" + encodeURIComponent(payload));
          helper.getHttpSender().sendAndReceive(newMsg);
          var responseBody = newMsg.getResponseBody().toString();
          // If payload is reflected in the body
          if (responseBody.includes(payload.replace(/<script>/g, "").replace(/<\/script>/g, ""))) {
            helper.raiseAlert(
              3, 2, "Reflected XSS",
              "Potential XSS with payload: " + payload,
              newMsg.getRequestHeader().getURI().toString(),
              "username",
              payload,
              responseBody,
              0, 0, newMsg
            );
          }
        }
      }
    }
  command_injection_test.zap: |
    function sender(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/ping")) {
        var cmdPayloads = [
          "localhost; whoami",
          "127.0.0.1 && ls -la",
          "google.com | cat /etc/passwd"
        ];
        for (var i = 0; i < cmdPayloads.length; i++) {
          var payload = cmdPayloads[i];
          var newMsg = msg.cloneRequest();
          newMsg.getRequestHeader().getURI().setQuery("host=" + encodeURIComponent(payload));
          helper.getHttpSender().sendAndReceive(newMsg);
          var responseBody = newMsg.getResponseBody().toString();
          if (responseBody.includes("root:") || 
              responseBody.includes("bin/bash") ||
              responseBody.includes("Permission denied")) {
            helper.raiseAlert(
              3, 2, "Command Injection",
              "Potential command injection with payload: " + payload,
              newMsg.getRequestHeader().getURI().toString(),
              "host",
              payload,
              responseBody,
              0, 0, newMsg
            );
          }
        }
      }
    }
  info_exposure_test.zap: |
    function sender(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/admin/env")) {
        helper.getHttpSender().sendAndReceive(msg);
        var responseBody = msg.getResponseBody().toString();
        var sensitiveKeys = ["PASSWORD", "SECRET", "KEY", "TOKEN", "CREDENTIAL"];
        for (var i = 0; i < sensitiveKeys.length; i++) {
          var key = sensitiveKeys[i];
          if (responseBody.includes(key)) {
            helper.raiseAlert(
              2, 2, "Sensitive Info Exposure",
              "Potential sensitive environment info: " + key,
              msg.getRequestHeader().getURI().toString(),
              "",
              key,
              responseBody,
              0, 0, msg
            );
          }
        }
      }
    }
  test_minimal.zap: |
    function sender(msg, initiator, helper) {
      print("Graal.js minimal test script loaded!");
    }