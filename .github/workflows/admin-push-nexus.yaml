name: Admin - Build, Scan, and Push Docker Image to Nexus

on:
  workflow_dispatch:
    inputs:
      nexus_repo_url:
        description: 'Nexus repository URL (e.g., 192.168.127.2:30500/myrepo)'
        required: true
        type: string
      image_name:
        description: 'Docker image name'
        required: true
        type: string
      image_tag:
        description: 'Docker image tag'
        required: true
        type: string
      allow_push_on_vulnerabilities:
        description: 'Allow push even if vulnerabilities are found (true/false, default: false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  build-and-push:
    runs-on: self-hosted

    env:
      NEXUS_REPO_URL: ${{ github.event.inputs.nexus_repo_url }}
      IMAGE_NAME: ${{ github.event.inputs.image_name }}
      IMAGE_TAG: ${{ github.event.inputs.image_tag }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_ADMIN_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_ADMIN_PASSWORD }}
      TRIVY_VERSION: "0.64.0"
      ALLOW_PUSH_ON_VULNERABILITIES: ${{ github.event.inputs.allow_push_on_vulnerabilities }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Java application with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract registry host:port
        id: registry
        shell: powershell
        run: |
          $hostport = $env:NEXUS_REPO_URL.Split('/')[0]
          Add-Content -Path $env:GITHUB_OUTPUT -Value "HOSTPORT=$hostport"

      - name: Log in to Nexus Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.registry.outputs.HOSTPORT }}
          username: ${{ env.NEXUS_USERNAME }}
          password: ${{ env.NEXUS_PASSWORD }}

      - name: Build Docker image
        shell: powershell
        run: |
          $tag = "${env:NEXUS_REPO_URL}/${env:IMAGE_NAME}:${env:IMAGE_TAG}"
          docker build -t "$tag" .

      - name: Download Trivy CLI if not cached
        shell: powershell
        run: |
          $trivyCacheDir = "C:/trivy-cache/$env:TRIVY_VERSION"
          if (!(Test-Path "$trivyCacheDir\trivy.exe")) {
            Write-Host "Downloading Trivy $env:TRIVY_VERSION"
            if (!(Test-Path "$trivyCacheDir")) { New-Item -ItemType Directory -Path "$trivyCacheDir" | Out-Null }
            $trivyZip = "trivy_${env:TRIVY_VERSION}_Windows-64bit.zip"
            $trivyUrl = "https://github.com/aquasecurity/trivy/releases/download/v${env:TRIVY_VERSION}/$trivyZip"
            Invoke-WebRequest -Uri $trivyUrl -OutFile "$trivyCacheDir\$trivyZip"
            Expand-Archive "$trivyCacheDir\$trivyZip" -DestinationPath "$trivyCacheDir"
          } else {
            Write-Host "Trivy already cached"
          }
          $env:PATH += ";$trivyCacheDir"

      - name: Scan Docker image with Trivy (with override option)
        id: trivy-scan
        shell: powershell
        run: |
          $trivyCacheDir = "C:/trivy-cache/$env:TRIVY_VERSION"
          $env:PATH += ";$trivyCacheDir"
          $tag = "${env:NEXUS_REPO_URL}/${env:IMAGE_NAME}:${env:IMAGE_TAG}"
          & "$trivyCacheDir\trivy.exe" image --severity CRITICAL,HIGH --exit-code 1 $tag
        continue-on-error: true

      - name: Warn if vulnerabilities found (and allow override)
        if: steps.trivy-scan.outcome == 'failure' && env.ALLOW_PUSH_ON_VULNERABILITIES == 'true'
        shell: powershell
        run: |
          Write-Host "::warning::Trivy scan found vulnerabilities, but ALLOW_PUSH_ON_VULNERABILITIES is true. Proceeding to push Docker image ON YOUR OWN RESPONSIBILITY."

      - name: Fail workflow if vulnerabilities found and override not allowed
        if: steps.trivy-scan.outcome == 'failure' && env.ALLOW_PUSH_ON_VULNERABILITIES != 'true'
        shell: powershell
        run: |
          Write-Error "Trivy scan found vulnerabilities and pushing is NOT allowed. Set allow_push_on_vulnerabilities to 'true' to override."
          exit 1

      - name: Push Docker image to Nexus
        if: steps.trivy-scan.outcome == 'success' || env.ALLOW_PUSH_ON_VULNERABILITIES == 'true'
        shell: powershell
        run: |
          $tag = "${env:NEXUS_REPO_URL}/${env:IMAGE_NAME}:${env:IMAGE_TAG}"
          docker push "$tag"