apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-pen-tests
data:
  # Custom SQL Injection Test
  sql_injection_test.zap: |
    var HttpSender = Java.type('org.parosproxy.paros.network.HttpSender')
    var Model = Java.type('org.parosproxy.paros.model.Model')
    var HistoryReference = Java.type('org.parosproxy.paros.model.HistoryReference')
    
    function sendingRequest(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/users")) {
        var testParams = ["1 OR 1=1", "1; DROP TABLE users", "1' OR '1'='1"];
        testParams.forEach(function(param) {
          var newMsg = msg.cloneRequest();
          newMsg.getRequestHeader().getURI().setQuery("id=" + encodeURIComponent(param));
          helper.getHttpSender().sendAndReceive(newMsg);
          print("Tested SQLi with param: " + param + " - Status: " + newMsg.getResponseHeader().getStatusCode());
        });
      }
    }
    
    function responseReceived(msg, initiator, helper) {
      // Check for SQL error responses
      if (msg.getResponseHeader().getStatusCode() == 500 && 
          msg.getResponseBody().toString().toLowerCase().contains("sql")) {
        print("Potential SQL Injection vulnerability found!");
      }
    }

  # Custom XSS Test
  xss_test.zap: |
    function sendingRequest(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/greet")) {
        var xssPayloads = [
          "<script>alert('XSS')</script>",
          "<img src=x onerror=alert(1)>",
          "\"'><script>alert(1)</script>"
        ];
    
        xssPayloads.forEach(function(payload) {
          var newMsg = msg.cloneRequest();
          newMsg.getRequestHeader().getURI().setQuery("username=" + encodeURIComponent(payload));
          helper.getHttpSender().sendAndReceive(newMsg);
          print("Tested XSS with payload: " + payload);
    
          // Check if payload was reflected without encoding
          var responseBody = newMsg.getResponseBody().toString();
          if (responseBody.includes(payload.replace(/<script>/g, "").replace(/<\/script>/g, ""))) {
            print("Potential XSS vulnerability found with payload: " + payload);
          }
        });
      }
    }

  # Custom Command Injection Test
  command_injection_test.zap: |
    function sendingRequest(msg, initiator, helper) {
      if (msg.getRequestHeader().getURI().getPath().contains("/api/ping")) {
        var cmdPayloads = [
          "localhost; whoami",
          "127.0.0.1 && ls -la",
          "google.com | cat /etc/passwd"
        ];
    
        cmdPayloads.forEach(function(payload) {
          var newMsg = msg.cloneRequest();
          newMsg.getRequestHeader().getURI().setQuery("host=" + encodeURIComponent(payload));
          helper.getHttpSender().sendAndReceive(newMsg);
          print("Tested Command Injection with payload: " + payload);
    
          // Check for command execution indicators
          var responseBody = newMsg.getResponseBody().toString();
          if (responseBody.includes("root:") || 
              responseBody.includes("bin/bash") ||
              responseBody.includes("Permission denied")) {
            print("Potential Command Injection vulnerability found with payload: " + payload);
          }
        });
      }
    }

  # Custom Info Exposure Test
  info_exposure_test.zap: |
    function sendingRequest(msg, initiator, helper) {
      // Test for sensitive info in environment endpoint
      if (msg.getRequestHeader().getURI().getPath().contains("/api/admin/env")) {
        helper.getHttpSender().sendAndReceive(msg);
        var responseBody = msg.getResponseBody().toString();
    
        // Check for common sensitive environment variables
        var sensitiveKeys = ["PASSWORD", "SECRET", "KEY", "TOKEN", "CREDENTIAL"];
        sensitiveKeys.forEach(function(key) {
          if (responseBody.includes(key)) {
            print("Potential sensitive information exposure found: " + key);
          }
        });
      }
    }